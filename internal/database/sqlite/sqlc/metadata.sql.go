// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: metadata.sql

package sqlc

import (
	"context"
)

const insertMetadata = `-- name: InsertMetadata :exec
INSERT INTO metadata(name, value) VALUES (?, ?)
`

type InsertMetadataParams struct {
	Name  string
	Value string
}

func (q *Queries) InsertMetadata(ctx context.Context, arg InsertMetadataParams) error {
	_, err := q.db.ExecContext(ctx, insertMetadata, arg.Name, arg.Value)
	return err
}

const metadata = `-- name: Metadata :many
SELECT name, value FROM metadata
`

func (q *Queries) Metadata(ctx context.Context) ([]Metadatum, error) {
	rows, err := q.db.QueryContext(ctx, metadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(&i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMetadata = `-- name: UpdateMetadata :exec
UPDATE metadata SET value=? WHERE name=?
`

type UpdateMetadataParams struct {
	Value string
	Name  string
}

func (q *Queries) UpdateMetadata(ctx context.Context, arg UpdateMetadataParams) error {
	_, err := q.db.ExecContext(ctx, updateMetadata, arg.Value, arg.Name)
	return err
}

const wipeAllMetadata = `-- name: WipeAllMetadata :exec
DELETE FROM metadata
`

func (q *Queries) WipeAllMetadata(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, wipeAllMetadata)
	return err
}
